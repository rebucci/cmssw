#######################################
#
# FE analyser package for tracker phase II
#
# Contact: viret_at_in2p3.fr
#
#######################################


The FE analyzer package is providing some tools in order to test the different FE data format and configuration. It uses as input extracted ROOT files containing CMSSW simulated events and produces different output types: text files, rootuples,...

The reference for the formats is:

https://espace.cern.ch/Tracker-Upgrade/Electronics/CIC/Shared%20Documents/Data%20formats/CIC_IO_Formats_v3.pdf

Most useful methods are described in point VI and VII


I/ Install and compile

This recipe is for lxplus, if there is a problem with your install, please contact me: viret_at_in2p3_dot_fr

Installation recipe is the following:

[lxplus]> git-clone git://github.com/sviret/FE_ana.git
[lxplus]> cd FE_ana
[lxplus]> make

This creates an executable called FE_ana in the directory, which can for different tasks, described below.

II/ Produce a sequence of trigger data after the CIC chip

./FE_ana -c evtbuild_TRG_CONC  -i INPUT_PHYS -j INPUT_MBIAS -n NBX -f SECTORDEF -o OUTPUT -m BENDCBC -b BENDMPA -k PHYS_PROP -e BLOCK_SIZE

where:

INPUT_PHYS  : extracted root file, or list of extracted root files containing physics events (ie which might pass L1)
INPUT_MBIAS : extracted root file, or list of extracted root files containing raw min bias events (ie which might not pass L1)
NBX         :  number of BXs you want to produce
SECTORDEF   : tracker geometry definition (csv file)
OUTPUT      : name of the ouptut ROOT file you want to produce
BENDCBC     : how many bits you want to code stub bend for the CBC (<=5)
BENDMPA     : how many bits you want to code stub bend for the MPA (<=5)
PHYS_PROP   : proportion of physics events in the CIC TRG sequence (in %)
BLOCK_SIZE  : size of the CIC block, in BX units (baseline is 8)

The result of this command is a root file containing, for all the sequences, the content of the TRG block for all the CIC chips. All the words are also stored, in binary formats. This output file can be used as a starting point to produce data patterns (used in parallel with an L1 output)


III/ Produce a sequence of L1 data after the CIC chip

./FE_ana -c evtbuild_L1_CONC  -i INPUT_PHYS -l BLOCK_SIZE -n NBX -r RATE -f SECTORDEF -o OUTPUT

INPUT_PHYS  : extracted root file, or list of extracted root files containing physics events (ie which might pass L1)
BLOCK_SIZE  : size of the L1 block within the CIC block, in bits (baseline is 64). Just to compute the FIFO size
NBX         : number of BXs you want to produce
RATE        : L1A rate, in kHz. The L1A will be randomly distributed along the BXs, following trigger rules. Average rate will be around RATE
SECTORDEF   : tracker geometry definition (csv file)
OUTPUT      : name of the ouptut ROOT file you want to produce


The result of this command is a root file containing, for all the bunch crossing containing an L1A, the content of the L1 data for all the CIC chips. All the words are also stored, in binary formats. This output file can be used as a starting point to produce data patterns (used in parallel with a TRG output)



IV/ Produce a sequence of trigger data before the CIC chip

./FE_ana -c evtbuild_TRG_FE  -i INPUT_PHYS -j INPUT_MBIAS -n NSEQ -f SECTORDEF -o OUTPUT -k PHYS_PROP

where:

INPUT_PHYS  : extracted root file, or list of extracted root files containing physics events (ie which might pass L1)
INPUT_MBIAS : extracted root file, or list of extracted root files containing raw min bias events (ie which might not pass L1)
NSEQ        : number of CIC blocks, of size BLOCK_SIZE (in number of BXs) you want to produce
SECTORDEF   : tracker geometry definition (csv file)
OUTPUT      : name of the ouptut ROOT file you want to produce
PHYS_PROP   : proportion of physics events in the CIC TRG sequence (in %)

The result of this command is a root file containing, for all the sequences, the content of the TRG block for all the MPA/CBC chips (be careful when precising the number of events, these chips are 8 times more than the CIC ones). All the words are also stored, in binary formats.


V/ Produce a sequence of L1 data before the CIC chip

./FE_ana -c evtbuild_L1_FE   -i INPUT_PHYS -l BLOCK_SIZE -n NBX -r RATE -f SECTORDEF -o OUTPUT

where:

INPUT_PHYS  : extracted root file, or list of extracted root files containing physics events (ie which might pass L1)
NBX         : number of BXs you want to produce
RATE        : L1A rate, in kHz. The L1A will be randomly distributed along the BXs, following trigger rules. Average rate will be around RATE
SECTORDEF   : tracker geometry definition (csv file)
OUTPUT      : name of the ouptut ROOT file you want to produce

The result of this command is a root file containing, for all the sequences, the content of the TRG block for all the MPA/CBC chips. All the words are also stored, in binary formats.



VI/  Trigger sequences generation for a complete tracker part


./FE_ana -c build_stim_TRG  -i INPUT_PHYS -j INPUT_MBIAS -n NSEQ -f SECTORDEF -o OUTPUT -k PHYS_PROP -u LAY -v LAD -w MOD -e BLOCKSIZE

INPUT_PHYS  : extracted root file, or list of extracted root files containing physics events (ie which might pass L1)
INPUT_MBIAS : extracted root file, or list of extracted root files containing raw min bias events (ie which might not pass L1)
NSEQ        :  number of BXs you want to produce
SECTORDEF   : tracker geometry definition (csv file)
OUTPUT      : name of the ouptut ROOT file you want to produce
PHYS_PROP   : proportion of physics events in the CIC TRG sequence (in %)
LAY         : layer number you're interested in (put -1 for all)
LAD         : ladder number you're interested in (put -1 for all)
MOD         : module number you're interested in (put -1 for all)
BLOCKSIZE   : size of the TRG block, in bits (from 256 to 768 depending on the GBT scheme)

The result is the same ROOT file than the other cases, but in addition 3 text files are produced:

    1. TRG_FE_in.txt: the front end digital input (analog not yet ready).

    2. TRG_FE_out.txt: the expected output from the MPA/CBC chips, given by group of 2BXs. The format is the one of the note mentioned previously. The packets are given per chip, the chip ID being mentionned, along with the BX, at the beginning of the line. Please note the in the CBC case, only the stub overflow bit is set if necessary.

    3. TRB_CIC_out.txt: the expected CIC output, given by group of 8BXs: the chip number here is 0 or 8, depending on the concentrator side (FEs 0 to 7 or 8 to 15). The status bits of the header are set to one if there is an FE or CIC overflow, and the stubs are ordered by ascending bend (lowest bend get the priority), as it will be done in the final chip.


VII/  L1 sequences generation for a complete tracker part


./FE_ana -c build_stim_RAW  -i INPUT_PHYS -n NSEQ -f SECTORDEF -o OUTPUT -u LAY -v LAD -w MOD -r RATE -e L1CICBITS -l ERROR

INPUT_PHYS  : extracted root file, or list of extracted root files containing physics events (ie which might pass L1)
NSEQ        : number of BXs you want to produce
SECTORDEF   : tracker geometry definition (csv file)
OUTPUT      : name of the ouptut ROOT file you want to produce
RATE        : L1A rate, in kHz. The L1A will be randomly distributed along the BXs, following trigger rules. Average rate will be around RATE
LAY         : layer number you're interested in (put -1 for all)
LAD         : ladder number you're interested in (put -1 for all)
MOD         : module number you're interested in (put -1 for all)
L1CICBITS   : the number of L1 bits extracted from the CIC per BX. This can be either 8 (LP-GBT) or 16 (10G-GBT). For the other chips the value is always 8
ERROR       : integer number containing five value ABCDE. Set the value to one to produce random errors in the corresponding field:
	    :  ERROR types : ABCDE
    	    // A: random errors (flip bits) out of the L1 data (SEU)  
    	    // B: header errors (flip bits)   
    	    // C: cluster size errors (flip bits)   
    	    // D: not used
    	    // E: not used

The result is the same ROOT file than the other cases, but in addition 3 text files are produced:

1. L1_FE_in.txt: the front end digital input (analog not yet ready) for the L1 accepted events, along with the BX ID when the L1A signal was received.

2. L1_FE_out.txt: the expected output from the MPA/CBC chips. Here we provide the full L1 sequence (NSEQ BXs) for all the chips. The format is the one of the note mentioned previously. BX number is provided, along with the L1A signal received, when it occurs.

3. L1_CIC_out.txt: the expected CIC output. Here we provide the full L1 sequence (NSEQ BXs) for all the chips. Here the data is retrieved from the MPA/CBC chips, so the CIC data extraction cannot start until the last L1 FE packet has been received. Timeout features are not included yet.


VIII/  Compare the CIC simulation output file with the verilog output 

./FE_ana -c compa_out_***  -i INPUT_VERILOG -j INPUT_SIMU -o OUTPUT

where *** can be: TRG, L1_MPA, or L1_CBC

INPUT_VERILOG : output text file produced by the verilog model (Yannick's parsing) 
INPUT_SIMU    : output text file produced by the simulation tool (CIC output from build_stim_trg or build_stim_raw) 
OUTPUT        : name of the ouptut text file summarizing the differences

